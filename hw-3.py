'''
Задача о банкомате
Инструкция по использованию платформы
У вас есть банковская карта с начальным балансом равным 0 у.е.
Вы хотите управлять этой картой, выполняя следующие операции,
для выполнения которых необходимо написать следующие функции:

check_multiplicity(amount): Проверка кратности суммы при пополнении и снятии.
deposit(amount): Пополнение счёта.
withdraw(amount): Снятие денег.
exit(): Завершение работы и вывод итоговой информации о состоянии счета и проведенных операциях.

Пополнение счета:
Функция deposit(amount) позволяет клиенту пополнять свой счет на определенную сумму.
Пополнение счета возможно только на сумму, которая кратна MULTIPLICITY.

Снятие средств:
Функция withdraw(amount) позволяет клиенту снимать средства со счета.
Сумма снятия также должна быть кратной MULTIPLICITY.
При снятии средств начисляется комиссия в процентах от снимаемой суммы,
которая может варьироваться от MIN_REMOVAL до MAX_REMOVAL.

Завершение работы:
Функция exit() завершает работу с банковским счетом.
Перед завершением, если на счету больше RICHNESS_SUM, начисляется налог на богатство
в размере RICHNESS_PERCENT процентов.

Проверка кратности суммы:
Функция check_multiplicity(amount) проверяет, кратна ли сумма amount заданному
множителю MULTIPLICITY.
Реализуйте программу для управления банковским счетом,
используя библиотеку decimal для точных вычислений.

Пример
На входе:
deposit(10000)
withdraw(4000)
exit()
print(operations)

На выходе:
 ['Пополнение карты на 10000 у.е. Итого 10000 у.е.', 'Снятие с карты 4000 у.е. Процент за снятие 60 у.е.. Итого 5940 у.е.']

На входе:
deposit(1000)
withdraw(200)
exit()
print(operations)

На выходе:
 ['Пополнение карты на 1000 у.е. Итого 1000 у.е.', 'Снятие с карты 200 у.е. Процент за снятие 30 у.е.. Итого 770 у.е.', 'Возьмите карту на которой 770 у.е.']
На входе:
deposit(1000)
withdraw(200)
withdraw(300)
deposit(500)
withdraw(3000)
exit()
print(operations)

На выходе:
['Пополнение карты на 1000 у.е. Итого 1000 у.е.', 'Снятие с карты 200 у.е. Процент за снятие 30 у.е.. Итого 770 у.е.', 'Снятие с карты 300 у.е. Процент за снятие 30 у.е.. Итого 440 у.е.', 'Пополнение карты на 500 у.е. Итого 940 у.е.', 'Недостаточно средств. Сумма с комиссией 3045.000 у.е. На карте 940 у.е.', 'Возьмите карту на которой 940 у.е.']
На входе:
deposit(173)
withdraw(21)
exit()
print(operations)

На выходе:
Сумма должна быть кратной 50 у.е.
Сумма должна быть кратной 50 у.е.
['Недостаточно средств. Сумма с комиссией 51 у.е. На карте 0 у.е.', 'Возьмите карту на которой 0 у.е.']
На входе:
deposit(1000000000000000)
withdraw(200)
withdraw(300)
deposit(500)
withdraw(3000)
exit()
print(operations)
На выходе:
['Пополнение карты на 1000000000000000 у.е. Итого 1000000000000000 у.е.', 'Снятие с карты 200 у.е. Процент за снятие 30 у.е.. Итого 999999999999770 у.е.', 'Снятие с карты 300 у.е. Процент за снятие 30 у.е.. Итого 999999999999440 у.е.', 'Пополнение карты на 500 у.е. Итого 999999999999940 у.е.', 'Снятие с карты 3000 у.е. Процент за снятие 45.000 у.е.. Итого 999999999996895.000 у.е.', 'Вычтен налог на богатство 0.1% в сумме 99999999999689.5000 у.е. Итого 899999999997205.5000 у.е.', 'Возьмите карту на которой 899999999997205.5000 у.е.']
'''


import decimal

MULTIPLICITY = 50 # кратность
PERCENT_REMOVAL = decimal.Decimal(15) / decimal.Decimal(1000) #процент комисси за снятие
MIN_REMOVAL = decimal.Decimal(30) #минимальная сумма комиссии
MAX_REMOVAL = decimal.Decimal(600) #максимальная сумма комиссии
PERCENT_DEPOSIT = decimal.Decimal(3) / decimal.Decimal(100) #процент комисси за пополнение
COUNTER4PERCENTAGES = 3 # ???
RICHNESS_PERCENT = decimal.Decimal(10) / decimal.Decimal(100) # процент на богатство
RICHNESS_SUM = decimal.Decimal(10_000_000) # сумма определения богатства

bank_account = decimal.Decimal(0) # баланс
count = 0 #счетчик
operations = [] # итоговые операции

# Введите ваше решение ниже

def check_multiplicity(amount): #Проверка кратности суммы при пополнении и снятии.
    '''Функция check_multiplicity(amount) проверяет,
    кратна ли сумма amount заданному множителю MULTIPLICITY.
    Реализуйте программу для управления банковским счетом,
    используя библиотеку decimal для точных вычислений.'''

    if amount % MULTIPLICITY == 0:
        return True
    else:
        return False

def deposit(amount): #Пополнение счёта.
    '''Функция deposit(amount) позволяет клиенту пополнять свой счет
    на определенную сумму. Пополнение счета возможно только на сумму, которая кратна MULTIPLICITY.'''

    global bank_account
    if check_multiplicity(amount) is True:
        bank_account += amount
        operations.append(f'Пополнение карты на {amount} у.е. Итого {bank_account} у.е.')
    else:
        print(f'Сумма должна быть кратной {MULTIPLICITY} у.е.')



def withdraw(amount): #Снятие денег.
    '''Функция withdraw(amount) позволяет клиенту снимать средства со счета.
    Сумма снятия должна быть кратной MULTIPLICITY.
    При снятии средств начисляется комиссия в процентах от снимаемой суммы,
    которая может варьироваться от MIN_REMOVAL до MAX_REMOVAL.'''
    global bank_account

    if check_multiplicity(amount) is True:

        if (amount * PERCENT_REMOVAL) > MAX_REMOVAL:
            percent_deposit_now = MAX_REMOVAL
        elif (amount * PERCENT_REMOVAL) < MIN_REMOVAL:
            percent_deposit_now = MIN_REMOVAL
        else:
            percent_deposit_now = amount * PERCENT_REMOVAL
        if bank_account - amount - percent_deposit_now >= 0:
            operations.append(f'Снятие с карты {amount} у.е. Процент за снятие {percent_deposit_now:.0f} у.е.. Итого {(bank_account - amount - percent_deposit_now):.0f} у.е.')
            bank_account -= amount + percent_deposit_now
        else:
            operations.append(f'Недостаточно средств. Сумма с комиссией {(percent_deposit_now + amount):.0f} у.е. На карте {bank_account} у.е.')
    else:
        if (amount * PERCENT_REMOVAL) > MAX_REMOVAL:
            percent_deposit_now = MAX_REMOVAL
        elif (amount * PERCENT_REMOVAL) < MIN_REMOVAL:
            percent_deposit_now = MIN_REMOVAL
        else:
            percent_deposit_now = amount * PERCENT_REMOVAL
        if bank_account - amount - percent_deposit_now >= 0:
            operations.append(f'Снятие с карты {amount} у.е. Процент за снятие {percent_deposit_now} у.е.. Итого {bank_account - amount - percent_deposit_now} у.е.')
            bank_account -= amount + percent_deposit_now
        else:
            operations.append(f'Недостаточно средств. Сумма с комиссией {percent_deposit_now + amount} у.е. На карте {bank_account} у.е.')

        print(f'Сумма должна быть кратной {MULTIPLICITY} у.е.')



def exit(): #Завершение работы и вывод итоговой информации о состоянии счета и проведенных операциях.
    '''Функция exit() завершает работу с банковским счетом.
    Перед завершением, если на счету больше RICHNESS_SUM,
    начисляется налог на богатство в размере RICHNESS_PERCENT процентов.'''

    global bank_account

    if bank_account > RICHNESS_SUM:
        operations.append(f'Вычтен налог на богатство {RICHNESS_PERCENT}% в сумме {(bank_account * RICHNESS_PERCENT)} у.е. Итого {bank_account - (bank_account * RICHNESS_PERCENT)} у.е.')
        bank_account -= (bank_account * RICHNESS_PERCENT)
        operations.append(f'Возьмите карту на которой {bank_account} у.е.')
    else:
        operations.append(f'Возьмите карту на которой {bank_account} у.е.')
    return operations

# ok №1
deposit(1000)
withdraw(200)
exit()
# Мой ответ
# ['Пополнение карты на 1000 у.е. Итого 1000 у.е.', 'Снятие с карты 200 у.е. Процент за снятие 30 у.е.. Итого 770 у.е.', 'Возьмите карту на которой 770 у.е.']

# ok №2
# deposit(173)
# withdraw(21)
# exit()
# Ожидаемый ответ:
# Сумма должна быть кратной 50 у.е.
# Сумма должна быть кратной 50 у.е.
# ['Недостаточно средств. Сумма с комиссией 51 у.е. На карте 0 у.е.', 'Возьмите карту на которой 0 у.е.']
# Мой ответ:
# Сумма должна быть кратной 50 у.е.
# Сумма должна быть кратной 50 у.е.
# ['Недостаточно средств. Сумма с комиссией 51 у.е. На карте 0 у.е.', 'Возьмите карту на которой 0 у.е.']

# ok №3
# deposit(1000)
# withdraw(200)
# withdraw(300)
# deposit(500)
# withdraw(3000)
# exit()
# Ожидаемый ответ:
# ['Пополнение карты на 1000 у.е. Итого 1000 у.е.', 'Снятие с карты 200 у.е. Процент за снятие 30 у.е.. Итого 770 у.е.', 'Снятие с карты 300 у.е. Процент за снятие 30 у.е.. Итого 440 у.е.', 'Пополнение карты на 500 у.е. Итого 940 у.е.', 'Недостаточно средств. Сумма с комиссией 3045 у.е. На карте 940 у.е.', 'Возьмите карту на которой 940 у.е.']
# Мой ответ:
# ['Пополнение карты на 1000 у.е. Итого 1000 у.е.', 'Снятие с карты 200 у.е. Процент за снятие 30 у.е.. Итого 770 у.е.', 'Снятие с карты 300 у.е. Процент за снятие 30 у.е.. Итого 440 у.е.', 'Пополнение карты на 500 у.е. Итого 940 у.е.', 'Недостаточно средств. Сумма с комиссией 3045 у.е. На карте 940 у.е.', 'Возьмите карту на которой 940 у.е.']

# ok
# deposit(1000000000000000)
# withdraw(200)
# withdraw(300)
# deposit(500)
# withdraw(3000)
# exit()

# Ожидаемый ответ:
# ['Пополнение карты на 1000000000000000 у.е. Итого 1000000000000000 у.е.', 'Снятие с карты 200 у.е. Процент за снятие 30 у.е.. Итого 999999999999770 у.е.', 'Снятие с карты 300 у.е. Процент за снятие 30 у.е.. Итого 999999999999440 у.е.', 'Пополнение карты на 500 у.е. Итого 999999999999940 у.е.', 'Снятие с карты 3000 у.е. Процент за снятие 45 у.е.. Итого 999999999996895 у.е.', 'Вычтен налог на богатство 0.1% в сумме 99999999999689.5000 у.е. Итого 899999999997205.5000 у.е.', 'Возьмите карту на которой 899999999997205.5000 у.е.']
# Мой ответ:
# ['Пополнение карты на 1000000000000000 у.е. Итого 1000000000000000 у.е.', 'Снятие с карты 200 у.е. Процент за снятие 30 у.е.. Итого 999999999999770 у.е.', 'Снятие с карты 300 у.е. Процент за снятие 30 у.е.. Итого 999999999999440 у.е.', 'Пополнение карты на 500 у.е. Итого 999999999999940 у.е.', 'Снятие с карты 3000 у.е. Процент за снятие 45 у.е.. Итого 999999999996895 у.е.', 'Вычтен налог на богатство 0.1% в сумме 99999999999689.5000 у.е. Итого 899999999997205.5000 у.е.', 'Возьмите карту на которой 899999999997205.5000 у.е.']
print(operations)
